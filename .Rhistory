usethis::create_github_token()
install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
knitr::opts_chunk$set(echo = TRUE)
dado_honesto = sample(1:6,100,replace = TRUE)
dado_honesto = c(dado_honesto)
table(dado_honesto)
signif(prop.table(dado_honesto),2)
library(tidyverse)
library(tidyverse)
datos %>%
count(datos$dado_honesto)
datos<-data.frame(dado_honesto)
library(tidyverse)
datos %>%
count(datos$dado_honesto)
dado_cargado = sample(1:6,100,replace = TRUE, prob = rep(c(6/7, 12/7), times = c(5, 1)))
dado_cargado
table(dado_cargado)
signif(prop.table(dado_cargado),2)
datos2<-data.frame(dado_cargado)
library(tidyverse)
datos2 %>%
count(datos2$dado_cargado)
v1 = rep(4:1,each = 4)
v2 = rep(1:5, c(1,2,3,4,5))
v3 = rep(seq(1:4),4)
v1
v2
v3
library(tidyverse)
mpg %>%
filter(class =='pickup') %>%
select(starts_with('c'))
homeDir <- "./"
if (grepl(pattern = "cloud", getwd())){
homeDir  <-  "/cloud/project/"
} else {
homeDir <- "./"
}
figpath <- function(figname){
paste0(homeDir,"fig/", figname)
}
options(width = 60)
library(knitr)
knitr::opts_chunk$set(comment = '', fig.width = 6, fig.height = 6)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
if (grepl(pattern = "cloud", getwd())){
homeDir  <-  "/cloud/project/"
} else {
homeDir <- "./"
}
figpath <- function(figname){
paste0(homeDir,"fig/", figname)
}
## Preliminares
```{r echo = FALSE}
library(tidyverse)
fhs = read_csv("data/framingham.csv")
library(gapminder)
names(gapminder)
gapminder %>%
select(lifeExp, gdpPercap) %>%
head(3)
gapminder %>%
select(continent:pop, -year) %>%
names()
gapminder %>%
select(starts_with("c")) %>%
names()
gapminder %>%
filter(country == 'Spain') %>%
head(4)
gapminder %>%
filter(year == "1997") %>%
top_n(3, gdpPercap)
# dplyr: mutate
gapminder %>%
mutate(gdp = pop * gdpPercap / 10^6) %>%
filter(year == 1982) %>%
sample_n(4)
gapminder %>%
mutate(gdp = pop * gdpPercap / 10^6) %>%
mutate_at("gdp", log10) %>%
head(4)
# dplyr: summarise
iris %>%
summarise(mediana = median(Petal.Length), desvMediana = mad(Petal.Length))
iris %>%
group_by(Species) %>%
summarise(mediana = median(Petal.Length), desvMediana = mad(Petal.Length))
# dplyr: summarise
iris %>%
summarise(mediana = median(Petal.Length), desvMediana = mad(Petal.Length))
iris %>%
group_by(Species) %>%
summarise(mediana = median(Petal.Length), desvMediana = mad(Petal.Length))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Instrucciones preliminares
+ Empieza abriendo el proyecto de RStudio correspondiente a tu repositorio personal de la asignatura.
+ En todas las tareas tendrás que repetir un proceso como el descrito en la sección *Repite los pasos Creando un fichero Rmarkdown para esta práctica* de la *Práctica00*. Puedes releer la sección *Practicando la entrega de las Tareas* de esa misma práctica para recordar el procedimiento de entrega.
# Ejercicio 1. Simulando variables aleatorias discretas.
**Apartado 1:** La variable aleatoria discreta $X1$ tiene esta tabla de densidad de probabilidad (es la variable que se usa como ejemplo en la Sesión ):
$$
\begin{array}{|c|c|c|c|c|c|c|}
\hline
\text{valor de }X1 & 0 & 1 & 2 & 3 \\
\hline
\text{Probabilidad de ese valor }P(X = x_i) & \dfrac{64}{125} &
\dfrac{48}{125}& \dfrac{12}{125} & \dfrac{1}{125}\rule{0mm}{6mm} \\[3mm]
\hline
\end{array}
$$
Calcula la media y la varianza teóricas de esta variable.
```{r}
library(tidyverse)
#Definimos la variable y calculamoa la media y varianza teórica
val_x<- c(0,1,2,3)
prob_x <- c(64/125, 48/125, 12/125, 1/125)
x1<- data.frame(cbind(val_x,prob_x))
#Media teórica
media_teorica <- sum((x1$val_x)*(x1$prob_x))
media_teorica
#Varianza teórica
varianza_teorica <- sum(((x1$val_x)^2 - media_teorica)*(x1$prob_x))
#Media teórica
media_teorica <- sum((x1$val_x)*(x1$prob_x))
media_teorica
#Varianza teórica
varianza_teorica <- sum(((x1$val_x)^2 - media_teorica)*(x1$prob_x))
varianza_teorica
#Varianza teórica
varianza_teorica <- sum(((x1$val_x)^2 - media_teorica)*(x1$prob_x))
varianza_teorica
**Apartado 2:**  Combina `sample` con `replicate` para simular cien mil muestras de tamaño 10 de esta variable $X1$. Estudia la distribución de las medias muestrales como hemos hecho en ejemplos previos, ilustrando con gráficas la distribución de esas medias muestrales. Cambia después el tamaño de la muestra a 30 y repite el análisis.
```{r}
k = 100000
n = 10
mediasMuestralesX1 = replicate(k, {
muestra = sample(x1$prob_x, n, replace = TRUE)
mean(muestra)
})
**Apartado 3:** La variable aleatoria discreta $X2$ tiene esta tabla de densidad de probabilidad:
$$
\begin{array}{|c|c|c|c|c|c|}
\hline
\text{valor de }X2 & 0 & 1 & 2 \\
\hline
\text{Probabilidad de ese valor }P(X = x_i) & \dfrac{1}{2} &
\dfrac{1}{4}&  \dfrac{1}{4}\rule{0mm}{6mm} \\[3mm]
\hline
\end{array}
$$
Suponemos que $X1$ y $X2$ son independientes. ¿Qué valores puede tomar la suma $X1 + X2$? ¿Cuál es su tabla de probabilidad?
val_x2<- c(0,1,2)
prob_x2 <- c(1/2, 1/4, 1/2)
x2<- data.frame(cbind(val_x2,prob_x2))
prob_0 <- x1$prob_x[1] * x2$prob_x2[1]
prob_0
prob_1 <- sum(x1$prob_x[1] * x2$prob_x2[2],x1$prob_x[2] * x2$prob_x2[1] )
prob_1
prob_2 <- sum(x1$prob_x[1] * x2$prob_x2[3],x1$prob_x[3] * x2$prob_x2[1],x1$prob_x[2] * x2$prob_x2[2]  )
prob_2
prob_3<- sum(x1$prob_x[4] * x2$prob_x2[1],x1$prob_x[2] * x2$prob_x2[3],x1$prob_x[3] * x2$prob_x2[2]  )
prob_3
prob_4 <- sum(x1$prob_x[4] * x2$prob_x2[1],x1$prob_x[3] * x2$prob_x2[3] )
prob_4
prob_5 <- x1$prob_x[4] * x2$prob_x2[2]
prob_5
probabilid<- c(prob_0,prob_1,prob_2,prob_3,prob_4,prob_5)
tabla_prob <- cbind(c(0:5), probabilid )
tabla_probabilidades <- data.frame(tabla_prob)
val_x2<- c(0,1,2)
prob_x2 <- c(1/2, 1/4, 1/2)
x2<- data.frame(cbind(val_x2,prob_x2))
prob_0 <- x1$prob_x[1] * x2$prob_x2[1]
prob_0
prob_1 <- sum(x1$prob_x[1] * x2$prob_x2[2],x1$prob_x[2] * x2$prob_x2[1] )
prob_1
prob_2 <- sum(x1$prob_x[1] * x2$prob_x2[3],x1$prob_x[3] * x2$prob_x2[1],x1$prob_x[2] * x2$prob_x2[2]  )
prob_2
prob_3<- sum(x1$prob_x[4] * x2$prob_x2[1],x1$prob_x[2] * x2$prob_x2[3],x1$prob_x[3] * x2$prob_x2[2]  )
prob_3
prob_4 <- sum(x1$prob_x[4] * x2$prob_x2[1],x1$prob_x[3] * x2$prob_x2[3] )
prob_4
prob_5 <- x1$prob_x[4] * x2$prob_x2[2]
prob_5
probabilid<- c(prob_0,prob_1,prob_2,prob_3,prob_4,prob_5)
tabla_prob <- cbind(c(0:5), probabilid )
tabla_probabilidades <- data.frame(tabla_prob)
**Apartado 4:** Calcula la media teórica de la suma $X_1 + X_2$. Después usa `sample` y `replicate` para simular cien mil *valores* de esta variable suma. Calcula la media de esos valores. *Advertencia:* no es el mismo tipo de análisis que hemos hecho en el segundo apartado.
```{r}
media_teorica2 <- sum(tabla_probabilidades$V1 *(tabla_probabilidades$probabilid))
media_teorica2
k=100000
n = 1
mediasMuestral2 = replicate(k, {
muestra2 = sample(tabla_probabilidades$probabilid, n, replace = TRUE)
mean(muestra2)
})
# Ejercicio 2. Datos limpios
+ Descarga el fichero de este enlace
[https://gist.githubusercontent.com/fernandosansegundo/471b4887737cfcec7e9cf28631f2e21e/raw/b3944599d02df494f5903740db5acac9da35bc6f/testResults.csv](https://gist.githubusercontent.com/fernandosansegundo/471b4887737cfcec7e9cf28631f2e21e/raw/b3944599d02df494f5903740db5acac9da35bc6f/testResults.csv)
+ Este fichero contiene las notas de los alumnos de una clase, que hicieron dos tests cada semana durante cinco semanas. La tabla de datos no cumple los principios de *tidy data* que hemos visto en clase. Tu tarea en este ejercicio es explicar por qué no se cumplen y obtener una tabla de datos limpios con la misma información usando *tidyR*.
**Indicación:** lee la ayuda de la función `separate` de *tidyR*.
```{r}
testResult <-read.csv(url('https://gist.githubusercontent.com/fernandosansegundo/471b4887737cfcec7e9cf28631f2e21e/raw/b3944599d02df494f5903740db5acac9da35bc6f/testResults.csv'))
summary(testResult)
library(tidyr)
#No cumplen los principios de tidy data porque las filas de week no corresponden a observaciones
(testResulTidys = testResult %>%
pivot_longer(week1:week5, names_to = "week") %>%
separate(gender_age, c("gender", "age"), sep = "([_])")
)
testResulTidys<- transform(testResulTidys, age = as.integer(age))
head(testResulTidys)
testResult <-read.csv(url('https://gist.githubusercontent.com/fernandosansegundo/471b4887737cfcec7e9cf28631f2e21e/raw/b3944599d02df494f5903740db5acac9da35bc6f/testResults.csv'))
summary(testResult)
library(tidyr)
#No cumplen los principios de tidy data porque las filas de week no corresponden a observaciones
(testResulTidys = testResult %>%
pivot_longer(week1:week5, names_to = "week") %>%
separate(gender_age, c("gender", "age"), sep = "([_])")
)
testResulTidys<- transform(testResulTidys, age = as.integer(age))
head(testResulTidys)
# Ejercicio 3. Lectura de R4DS.
Continuando con nuestra *lectura conjunta* de este libro, si revisas el índice verás que hemos cubierto (holgadamente en algún caso) el contenido de los Capítulos 6, 8, 9, 10 y 11. Todos esos Capítulos son relativamente ligeros.  Por eso esta semana conviene detenerse un poco en la lectura de los Capítulos 7 y 12, que son los más densos en información. Y como motivación os proponemos un par de ejercicios, uno por cada uno de esos capítulos.
+ Haz el [ejercicio 2 de la Sección 7.5.1.1 de R4DS](https://r4ds.had.co.nz/exploratory-data-analysis.html#exercises-17). Las ideas de esa sección son importantes para nuestro trabajo de las próximas sesiones.
```{r}
library(tidyverse)
library(deeplr)
datos <- diamonds
#Variable más importante para determinar el precio de un diamante
#Carat sobre price
ggplot(data = diamonds, mapping = aes(x = price, y =carat)) +
geom_boxplot(mapping = aes(cut_width(carat , 0.8)), orientation = "x")
#Variable más importante para determinar el precio de un diamante
#Carat sobre price
ggplot(data = diamonds, mapping = aes(x = price, y =carat)) +
geom_boxplot(mapping = aes(cut_width(carat , 0.8)), orientation = "x")
#Color sobre price
ggplot(data = diamonds, mapping = aes(x = price, y =color)) +
geom_boxplot(mapping = aes(cut_width(color , 0.8)), orientation = "x")
#Clarity sobre price
ggplot(data = diamonds, mapping = aes(x = price, y =clarity)) +
geom_boxplot(mapping = aes(cut_width(clarity , 0.8)), orientation = "x")
#Color sobre price
ggplot(data = diamonds, mapping = aes(x = price, y =color)) +
geom_boxplot(mapping = aes(cut_width(color , 0.8)), orientation = "x")
+ Haz el [ejercicio 4 de la Sección 12.6.1 de R4DS](https://r4ds.had.co.nz/tidy-data.html#exercises-27). ¡Aprovecha el código previo de esa sección para trabajar con datos limpios!
```{r}
datos2 <- tidyr::who
#limpieza de datos
datos2 <- datos2 %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
) %>%
mutate(
key = stringr::str_replace(key, "newrel", "new_rel")
) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
